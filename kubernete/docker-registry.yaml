#定义namespace
apiVersion: v1
kind: Namespace
metadata:
  name: docker-registry
---
#需要自定义storageclass
#apiVersion: storage.k8s.io/v1
#kind: StorageClass
#metadata:
#  name: local-storage
#provisioner: kubernetes.io/no-provisioner
#volumeBindingMode: WaitForFirstConsumer
#reclaimPolicy: Retain
---
#定义一个pv，使用此storage class
apiVersion: v1
kind: PersistentVolume
metadata:
  name: docker-registry-pv
  labels:
    pv: docker-registry-pv
  namespace: docker-registry
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: hostpath
  hostPath:
    path: "D:/k8s/mount"
#  nodeAffinity:
#    required:
#      nodeSelectorTerms:
#        - matchExpressions:
#            - key: kubernetes.io/hostname
#              operator: In
#              values:
#                - docker-desktop
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-registry-pvc
  namespace: docker-registry
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteMany
  storageClassName: hostpath
  selector:
    matchLabels:
      pv: docker-registry-pv
---
#定义deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: docker-images-registry
  name: docker-images-registry
  namespace: docker-registry
spec:
  replicas: 1
#  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: docker-images-registry
  template:
    metadata:
      labels:
        app: docker-images-registry
    spec:
#      securityContext:
#        runAsUser: 0
      containers:
        - name: docker-images-registry
          image: registry
#          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
#              name: web
#              protocol: TCP
#          resources:
#            requests:
#              memory: 200Mi
#              cpu: "0.1"
#          terminationMessagePath: /dev/termination-log
#          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: "/var/lib/registry"
              name: registry-storage
      volumes:
        - name: registry-storage
          persistentVolumeClaim:
            claimName: docker-registry-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry-service
  namespace: docker-registry
spec:
  ports:
    - name: port-name
      port: 5000
      protocol: TCP
      targetPort: 5000
  selector:
    app: docker-images-registry
  type: NodePort
